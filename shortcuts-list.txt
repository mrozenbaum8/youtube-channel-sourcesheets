<----Terminal---->
<ls> show files in current directory
<cd> open folder
<open> open file
<mkdir> new folder
<touch> new file
<rm -r> delete
<open -a "Visual Studio Code"> open files with vcode
<./filename> run filename (as program)
<code filename> create new filename and open in vs code

<----Git and GitHub---->
<git --version>
<git clone> download repository
<git remote -v> show downloaded depository remote address
<git status> depository status
<git add> add file to staging area before commiting
<git commit -m "comment here"> commit files to depository with comment
<git commit -am "comment here"> add and commit all changed files
<git log> view commit history
<git push> Publish repository to github
<git add -A> add all untracked files
<git remote -v> list existing remotes
<git config -l> check configs of repository
<git reset --hard "commit_hash"> get back to older state of repository
<git reset --hard origin/master> get back to older state of repository
<git diff filename> view changes to a file since previous commit
<git add -p> add only part of a change to staging area
<git remote remove origin> remove remote
<git remote set-url origin git://new.url.here> Instead of removing and re-adding
<git branch> which branch I am currently on, plus lists all branches in repository
<git checkout -b "new_branch_name"> create new branch
<git checkout "master"> switch to main branch
<git merge "style"> merges "style" branch to current branch


<----HTML---->
<strong> bold
<em> italics
<!--comment-->
<ul> unordered list
<ol> ordered lis
<li> list item
<a href> links
<./> Look for files relative to the current directory.
<../> Look for files up the parent directory.
! boilerplate template in vcode
<span> inline div

<----CSS---->
<link rel="stylesheet" href="styles.css"> external css
<style></style> internal css
<*{}> universal selector
<type{}> type selector
<.class{}> class selector
<#id{}> class selector
<selector1, selector2{}> group selectors
<selector1.selector2> chain selectors. selects any element that has both.
<.ancestor .contents {}> descendant combinator
ID>Class>Type
<display: block;> one box with width of 100% for whole line.
<display: inline-block;> can set width via padding. can have multiple boxes per line.
Some HTML elements, such as <h1> and <p>, use block as their outer display type by default.
Some HTML elements, such as <a>, <span>, <em> and <strong> use inline as their outer display type by default.
<.box{box-sizing: border-box;}> turn on alternative model for an element
<html {
  box-sizing: border-box;
}
*, *::before, *::after {
  box-sizing: inherit;
}>set alternative model for all html and let other elements inherit the value.
margin does not count towards box size
<border-width; border-style; border-color;> multiple properties. these can be inline in one property.
<span> Horizontal padding, margins, and borders are respected.
<display:flex; or display:inline-flex> flex container (inside of div / container)
<flex:1 1 auto;> = flex-grow, flex-shrink, flex-basis
<flex-grow> stretch item to fill available space in container
<flex-shrink> can become smaller than the flex-basis
<flex-basis> if set to auto then div size or content's size 
<flex-direction: column> change from default row direction
<justify-content> align items according to flex-direction
<align-items> align items perpendicular to flex-direction
<flex-wrap> wrap flex containers (similar to word wrap on vscode)
<flex-flow> combines felx-wrap and flex-flow
<justify-content> align items on main axis
<align-items> align items on the cross axis

<---Javascript--->
<console.log()> prints to developer console
<let variable1 = 'variable1 value';>define the variable + value
<let variable1;> define variable1 only
<variable1='value'> define value only
<let var1 = 'value1', var2='value2', var3='value3';> multiple variables at the same time
<Variables named apple and AppLE> are two different variables
<let, class, return, and function> reserved. cannot be used as variable names.
<"use strict";> compatible only with newer scripts.
<const variable1 = 'variable1 value';>define a constant variable + value. value cannot be reasigned.
Use constants as aliases for difficult-to-remember values.
Make names maximally descriptive and concise. Use human-readable names.
<**> exponentation
<%> modulus (division remainder)
<++> increment
<--> decrement
JavaScript Operator Precedence Values
<number> number
<'number'> string
if all numbers are strings in an operation then strings will be converted to numbers except when adding, because <+> is used to concatenate strings.
<variable1.toString()> output variable1 (numbers) from base 2 to base 36.
The binary + is the only operator that supports strings.
<((x==y))> equal?
<((x===y))> checks the equality without type conversion
<!==> checks the inequality without type conversion
<typeof variable> what type of variable is it
<const1.toFixed(n)> round const1 to n decimal places
<Number(stringName)> convert string to number
<x += 4> x = x + 4
<== and !=> test whether the values are the same but not whether the values' datatypes are the same
<=== and !==>test the equality of both the values and their datatypes
<+var1 + +var2> convert strings to number before adding.
<n *= 3 + 5;> equals 14 (right part evaluated first)
<`${â€¦}`> embed variables and expressions into a string. only w/ backticks.
<\> escape character after quote
<Number(myString);> converts anything passed to it into a number
<myNum.toString()> converts anything passed to it into a string
<txt.length> returns the lenght of a string
<str.slice(n1, n2 or -n1, -n2) or myStr.substring(n1, n2 or -n1)> extracts a part of a string and returns the extracted part (chars from n1 to n2) in a new string.
<text.replace("old txt", "new txt");> replace text. returns a new string.
<text.replace(/old txt/i, "new txt")> replace case insensitive
<text.replace(/old txt/g, "new txt")> replace all instances
<myTxt.toLowerCase()>
<myTxt.toUpperCase()>
<myTxt.concat(" ", myTxt2);> = Txt Txt2 (as new string)
<myTxt.trim()> removes whitespace from both sides of a string
<text.padStart(4,0);> add padding
<text.padEnd(4,0);> add padding
<myText.charAt(n)> returns the character at a specified index (position) in a string.
<myText.charCodeAt(n)> method returns the unicode of the character at a specified index in a string
<text1.split(",")> Split on commas
<text1.split(" ")> Split on spaces
<text1.split("|")> Split on pipe
<|| (OR), && (AND), ! (NOT), ?? (Nullish Coalescing)> logical operators
<||> Finds the first truthy value from a list of variables or expressions. Short-circuit evaluation.
<&&> finds the first falsy value. When all values are truthy, the last value is returned.
<! (NOT)> returns inverse value. The precedence of NOT ! is the highest of all logical operators, so it always executes first, before && or ||.
<( condition ) ? run this code : run this code instead> ternary operator. instead of if...else.

<---C---->
<%p, p> placeholder for pointer
<%d, f(i)> placeholder for function
<%s, s> placeholder for string
<%i, i> placeholder for int
<int* pa, *pb, *pc> intitiate multiple pointers at once.
always check for NULL after calling malloc()

<----Linux---->
<sudo -i> temporarily login as root user
<control + d> logout of root
<sudo apt-get update> update packages 1
<sudo apt-get upgrade> update packages 2
<sudo apt-get dist-upgrade> update packages 3 (optional)
<sudo reboot now> reboot server
<sudo shutdown> shutdown server
<df -h> list all partitions.
<sudo mount /dev/sdb1 /mnt/media> mount drive into location

<----Docker---->
<systemctl start docker>
<systemctl enable docker> use when user not in docker group, else:
<sudo chmod 666 /var/run/docker.sock> use when user not in docker group

<---Sambashare--->
<sudo apt update>
<sudo apt install samba>
<smbd --version>
<sudo vim /etc/samba/smb.conf> setup file
<[sambashare]
comment= Network Shared Folder by Samba Server on Ubuntu
path = /home/your_username/sambashare
force user = smbuser
force group = smbgroup
create mask = 0664
force create mode = 0664
directory mask = 0775
force directory mode = 0775
public = yes
read only = no>
<echo $USER> update permisions
<mkdir -p sambashare> make shared directory, as per specified in cofig file
<sudo groupadd --system smbgroup>
<sudo useradd --system --no-create-home --group smbgroup -s /bin/false smbuser>
<sudo chown -R smbuser:smbgroup ~/sambashare> change folder owner
<sudo chmod -R g+w ~/sambashare>
<sudo systemctl restart smbd>
<sudo systemctl status smbd>
<sudo ufw enable samba> use if problems encoutered

<---------Django--------->
<django-admin startproject PROJECT_NAME> start new django project
<python3 manage.py runserver> start django server (inside project directory)
<python3 manage.py startapp NAME> create new app (within django project)
<python3 manage.py makemigrations> update database to include new models
<python3 manage.py migrate> create all the default tables inside database
<python3 manage.py shell> enter shell to run python commands
<models.CASCADE> delete associated data from table
<models.PROTECT> don't delete associated data from table
<TableName.objects.all()> get all data from table
<Table.objects.filter(column="value")> get all values that fulfill condition
<Table.objects.filter(column="value").first()> get first value
<Table.objects.get(column="value")> use only if you know only one value exists
<object.related_name.all()> get all instances
<{% condition %}> html start condition (if, for)
<{% endcondition %}> html end condition (if, for)
<{{ variable }}> html variable
<{% block NAME %}> start html template area
<{% endblock %}> end html template area
<{% extends "templates/folder/layout.html" %}> inherit layout.html template
<{% block NAME %}> start add area (current html)
<{% endblock %}> end add area (current html)
<app_name = "tasks"> uniquely identify urls. from urls.py
<{% url 'app:route' %}> href to url of 'route' from 'app'
<{% csrf_token %}> insert csrf validation for post requests (in html pages)
<class NewTaskForm(forms.Form)> create new task template (input fields only)
<if request.method == "POST"> check for request method
<if form.is_valid()> check for valid form request
<form.cleaned_data["FIELD"]> extract FIELD data value only
<return HttpResponseRedirect(reverse("APP:PAGE"))> redirect to page from app (let Django figure out the url of the route (using name="" from urls.py))
<request.session> a dict containing all the session's data
{% empty %} if loop is empty, display alt message (in html).

<-------SQL-------->
<touch name.sql> create sql file in terminal
<sqlite3 name.sql> run sql file in terminal
<.tables> show all tables in database
<CREATE TABLE name (id INTERGER PRIMARY KEY AUTOINCREMENT, other data...);> create sql table
<INSERT INTO tablename (column1, column2) VALUES ("value1", value2);> insert data into table
<SELECT * FROM name;> get all data from table
<.mode columns> put database into column mode
<.headers yes> activate table headers
<SELECT column1, column2 FROM table;> get all data from table
<SELECT * FROM name WHERE id = 3;> get data from all columns from row 3
<SELECT * FROM table WHERE column1 IN ("value1", "value2");>
<SELECT * FROM table WHERE column1 LIKE "%a%";> get data where there is an a in column1
<UPDATE table SET column2 = value1 WHERE column1 = value2 AND column3 = value3;> update values on table
<DELETE FROM table WHERE column = "value1";> delete row that fills column condition
<LIMIT, ORDER BY, GROUP BY, HAVING> other clauses
<CREATE INDEX name_index ON table (column);>


<--------Cisco--------->
<enable> log into privileged mode (root access)
<configure terminal> enter global configuration
<conf t> enter global configuration (fast command)
<hostname NAME> set hostname to NAME
<interface gigabitEthernet 0/0/0/> select interface 0
<no shut> turn interface on
<ip address 10.0.0.1 255.255.255.0> add ip/subnet for current selected interface
<end> back to privileged mode
<copy running-config startup-config> save running configuration
<wr> save running configuration (fast command)
<sh ip int brief> see router ip

