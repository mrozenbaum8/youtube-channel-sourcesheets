<----Terminal---->
<ls> show files in current directory
<cd> open folder
<open> open file
<mkdir> new folder
<touch> new file
<rm -R> delete
<open -a "Visual Studio Code"> open files with vcode

<----Git and GitHub---->
<git --version>
<git clone> download repository
<git remote -v> show downloaded depository remote address
<git status> depository status
<git add> add file to staging area before commiting
<git commit -m "comment here"> commit files to depository with comment
<git log> view commit history
<git push> Publish repository to github
<git add -A> add all untracked files
<git remote -v> list existing remotes
<git config -l> check configs of repository
<git diff filename> view changes to a file since previous commit
<git add -p> add only part of a change to staging area
<git remote remove origin> remove remote
<git remote set-url origin git://new.url.here> Instead of removing and re-adding

<----HTML---->
<strong> bold
<em> italics
<!--comment-->
<ul> unordered list
<ol> ordered lis
<li> list item
<a href> links
<./> Look for files relative to the current directory.
<../> Look for files up the parent directory.
! boilerplate template in vcode
<span> inline div

<----CSS---->
<link rel="stylesheet" href="styles.css"> external css
<style></style> internal css
<*{}> universal selector
<type{}> type selector
<.class{}> class selector
<#id{}> class selector
<selector1, selector2{}> group selectors
<selector1.selector2> chain selectors. selects any element that has both.
<.ancestor .contents {}> descendant combinator
ID>Class>Type
<display: block;> one box with width of 100% for whole line.
<display: inline-block;> can set width via padding. can have multiple boxes per line.
Some HTML elements, such as <h1> and <p>, use block as their outer display type by default.
Some HTML elements, such as <a>, <span>, <em> and <strong> use inline as their outer display type by default.
<.box{box-sizing: border-box;}> turn on alternative model for an element
<html {
  box-sizing: border-box;
}
*, *::before, *::after {
  box-sizing: inherit;
}>set alternative model for all html and let other elements inherit the value.
margin does not count towards box size
<border-width; border-style; border-color;> multiple properties. these can be inline in one property.
<span> Horizontal padding, margins, and borders are respected.
<display:flex; or display:inline-flex> flex container (inside of div / container)
<flex:1 1 auto;> = flex-grow, flex-shrink, flex-basis
<flex-grow> stretch item to fill available space in container
<flex-shrink> can become smaller than the flex-basis
<flex-basis> if set to auto then div size or content's size 
<flex-direction: column> change from default row direction
<justify-content> align items according to flex-direction
<align-items> align items perpendicular to flex-direction
<flex-wrap> wrap flex containers (similar to word wrap on vscode)
<flex-flow> combines felx-wrap and flex-flow
<justify-content> align items on main axis
<align-items> align items on the cross axis

<---Javascript--->
<console.log()> prints to developer console
<let variable1 = 'variable1 value';>define the variable + value
<let variable1;> define variable1 only
<variable1='value'> define value only
<let var1 = 'value1', var2='value2', var3='value3';> multiple variables at the same time
<Variables named apple and AppLE> are two different variables
<let, class, return, and function> reserved. cannot be used as variable names.
<"use strict";> compatible only with newer scripts.
<const variable1 = 'variable1 value';>define a constant variable + value. value cannot be reasigned.
Use constants as aliases for difficult-to-remember values.
Make names maximally descriptive and concise. Use human-readable names.
<**> exponentation
<%> modulus (division remainder)
<++> increment
<--> decrement
JavaScript Operator Precedence Values
<number> number
<'number'> string
if all numbers are strings in an operation then strings will be converted to numbers except when adding, because <+> is used to concatenate strings.
<variable1.toString()> output variable1 (numbers) from base 2 to base 36.
<((x==y))> equal?
<((x===y))> not equal?
<typeof variable> what type of variable is it
<const1.toFixed(n)> round const1 to n decimal places
<Number(stringName)> convert string to number
<x += 4> x = x + 4
<== and !=> test whether the values are the same but not whether the values' datatypes are the same
<=== and !==>test the equality of both the values and their datatypes